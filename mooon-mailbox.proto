// Written by yijian on 2024/01/20
syntax = "proto3";
package mooon_mailbox;

// 当 protoc-gen-go 版本大于 1.4.0 时需加上 go_package，否则编译报错“unable to determine Go import path for”
option go_package = "./mooon-mailbox";

// 信件
message Letter {
  // 信件状态
  enum LetterState {
    LETTER_UNREAD = 0; // 未读信件
    LETTER_READ = 1; // 已读信件
  }

  string letter_id = 1; // 信件 ID
  string deliver_time = 2; // 投递时间
  string arrival_time = 3; // 到达时间
  string letter_body = 4; // 信件内容
  LetterState letter_state = 5; // 信件状态
}

// 投递单个信件
message DeliverMessageReq {
  string recipient = 1; // 收件人
  string letter_body = 2; // 信件内容
}

message DeliverMessageResp {
  string recipient = 1; // 收件人
  string letter_id = 2; // 信件 ID
}

// 批量列出信件
message ListMessagesReq {
  // 批量列出信件动作
  enum ListAction {
    LA_ALL = 0; // 所有信件
    LA_ONLY_UNREAD = 1; // 仅未读信件
    LA_ONLY_READ = 2; // 仅已读信件
  }

  string recipient = 1; // 收件人
  string start_letter_id = 2; // 起始页，值为空表示首页
  int64 page_size = 3; // 页大小，默认为 10
  ListAction list_action = 4; // 列出动作
}

message ListMessagesResp {
  string recipient = 1; // 收件人ListAction
  repeated Letter letters = 2; // 信件列表
  string  next_page_start = 3; // 下一页
}

// 批量标记为已读
message MarkMessagesAsReadReq {
  string recipient = 1; // 收件人
  repeated string letters_id_list = 2; // 信件 ID 列表
}

message MarkMessagesAsReadResp {
  string recipient = 1; // 收件人
}

// 批量删除信件
message DeleteMessagesReq {
  string recipient = 1; // 收件人
  repeated string letters_id_list = 2; // 信件 ID 列表
}

message DeleteMessagesResp {
  string recipient = 1; // 收件人
}

// 信箱服务
service MooonMailbox {
  // 投递单个信件
  rpc deliver_message(DeliverMessageReq) returns(DeliverMessageResp);

  // 批量列出信件
  rpc list_messages(ListMessagesReq) returns (ListMessagesResp);

  // 批量标记为已读
  rpc mark_messages_as_read(MarkMessagesAsReadReq) returns (MarkMessagesAsReadResp);

  // 批量删除信件
  rpc delete_messages(DeleteMessagesReq) returns (DeleteMessagesResp);
}
