// Written by yijian on 2024/01/20

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mooon-mailbox.proto

package mooon_mailbox

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MooonMailbox_DeliverMessage_FullMethodName = "/mooon_mailbox.MooonMailbox/deliver_message"
	MooonMailbox_ListMessages_FullMethodName   = "/mooon_mailbox.MooonMailbox/list_messages"
	MooonMailbox_MarkAsRead_FullMethodName     = "/mooon_mailbox.MooonMailbox/mark_as_read"
	MooonMailbox_DeleteLetter_FullMethodName   = "/mooon_mailbox.MooonMailbox/delete_letter"
)

// MooonMailboxClient is the client API for MooonMailbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MooonMailboxClient interface {
	DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error)
	ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (*ListMessagesResp, error)
	MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*MarkAsReadResp, error)
	DeleteLetter(ctx context.Context, in *DeleteLetterReq, opts ...grpc.CallOption) (*DeleteLetterResp, error)
}

type mooonMailboxClient struct {
	cc grpc.ClientConnInterface
}

func NewMooonMailboxClient(cc grpc.ClientConnInterface) MooonMailboxClient {
	return &mooonMailboxClient{cc}
}

func (c *mooonMailboxClient) DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error) {
	out := new(DeliverMessageResp)
	err := c.cc.Invoke(ctx, MooonMailbox_DeliverMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mooonMailboxClient) ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (*ListMessagesResp, error) {
	out := new(ListMessagesResp)
	err := c.cc.Invoke(ctx, MooonMailbox_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mooonMailboxClient) MarkAsRead(ctx context.Context, in *MarkAsReadReq, opts ...grpc.CallOption) (*MarkAsReadResp, error) {
	out := new(MarkAsReadResp)
	err := c.cc.Invoke(ctx, MooonMailbox_MarkAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mooonMailboxClient) DeleteLetter(ctx context.Context, in *DeleteLetterReq, opts ...grpc.CallOption) (*DeleteLetterResp, error) {
	out := new(DeleteLetterResp)
	err := c.cc.Invoke(ctx, MooonMailbox_DeleteLetter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MooonMailboxServer is the server API for MooonMailbox service.
// All implementations must embed UnimplementedMooonMailboxServer
// for forward compatibility
type MooonMailboxServer interface {
	DeliverMessage(context.Context, *DeliverMessageReq) (*DeliverMessageResp, error)
	ListMessages(context.Context, *ListMessagesReq) (*ListMessagesResp, error)
	MarkAsRead(context.Context, *MarkAsReadReq) (*MarkAsReadResp, error)
	DeleteLetter(context.Context, *DeleteLetterReq) (*DeleteLetterResp, error)
	mustEmbedUnimplementedMooonMailboxServer()
}

// UnimplementedMooonMailboxServer must be embedded to have forward compatible implementations.
type UnimplementedMooonMailboxServer struct {
}

func (UnimplementedMooonMailboxServer) DeliverMessage(context.Context, *DeliverMessageReq) (*DeliverMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverMessage not implemented")
}
func (UnimplementedMooonMailboxServer) ListMessages(context.Context, *ListMessagesReq) (*ListMessagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMooonMailboxServer) MarkAsRead(context.Context, *MarkAsReadReq) (*MarkAsReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedMooonMailboxServer) DeleteLetter(context.Context, *DeleteLetterReq) (*DeleteLetterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLetter not implemented")
}
func (UnimplementedMooonMailboxServer) mustEmbedUnimplementedMooonMailboxServer() {}

// UnsafeMooonMailboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MooonMailboxServer will
// result in compilation errors.
type UnsafeMooonMailboxServer interface {
	mustEmbedUnimplementedMooonMailboxServer()
}

func RegisterMooonMailboxServer(s grpc.ServiceRegistrar, srv MooonMailboxServer) {
	s.RegisterService(&MooonMailbox_ServiceDesc, srv)
}

func _MooonMailbox_DeliverMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MooonMailboxServer).DeliverMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MooonMailbox_DeliverMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MooonMailboxServer).DeliverMessage(ctx, req.(*DeliverMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MooonMailbox_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MooonMailboxServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MooonMailbox_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MooonMailboxServer).ListMessages(ctx, req.(*ListMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MooonMailbox_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MooonMailboxServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MooonMailbox_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MooonMailboxServer).MarkAsRead(ctx, req.(*MarkAsReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MooonMailbox_DeleteLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLetterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MooonMailboxServer).DeleteLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MooonMailbox_DeleteLetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MooonMailboxServer).DeleteLetter(ctx, req.(*DeleteLetterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MooonMailbox_ServiceDesc is the grpc.ServiceDesc for MooonMailbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MooonMailbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mooon_mailbox.MooonMailbox",
	HandlerType: (*MooonMailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deliver_message",
			Handler:    _MooonMailbox_DeliverMessage_Handler,
		},
		{
			MethodName: "list_messages",
			Handler:    _MooonMailbox_ListMessages_Handler,
		},
		{
			MethodName: "mark_as_read",
			Handler:    _MooonMailbox_MarkAsRead_Handler,
		},
		{
			MethodName: "delete_letter",
			Handler:    _MooonMailbox_DeleteLetter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mooon-mailbox.proto",
}
