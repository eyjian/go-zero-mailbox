// Code generated by goctl. DO NOT EDIT.
// Source: mooon-mailbox.proto

package mooonmailbox

import (
	"context"

	"mooon-mailbox/pb/mooon-mailbox"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteMessagesReq      = mooon_mailbox.DeleteMessagesReq
	DeleteMessagesResp     = mooon_mailbox.DeleteMessagesResp
	DeliverMessageReq      = mooon_mailbox.DeliverMessageReq
	DeliverMessageResp     = mooon_mailbox.DeliverMessageResp
	Letter                 = mooon_mailbox.Letter
	ListMessagesReq        = mooon_mailbox.ListMessagesReq
	ListMessagesResp       = mooon_mailbox.ListMessagesResp
	MarkMessagesAsReadReq  = mooon_mailbox.MarkMessagesAsReadReq
	MarkMessagesAsReadResp = mooon_mailbox.MarkMessagesAsReadResp

	MooonMailbox interface {
		// 投递单个信件
		DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error)
		// 批量列出信件
		ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (*ListMessagesResp, error)
		// 批量标记为已读
		MarkMessagesAsRead(ctx context.Context, in *MarkMessagesAsReadReq, opts ...grpc.CallOption) (*MarkMessagesAsReadResp, error)
		// 批量删除信件
		DeleteMessages(ctx context.Context, in *DeleteMessagesReq, opts ...grpc.CallOption) (*DeleteMessagesResp, error)
	}

	defaultMooonMailbox struct {
		cli zrpc.Client
	}
)

func NewMooonMailbox(cli zrpc.Client) MooonMailbox {
	return &defaultMooonMailbox{
		cli: cli,
	}
}

// 投递单个信件
func (m *defaultMooonMailbox) DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error) {
	client := mooon_mailbox.NewMooonMailboxClient(m.cli.Conn())
	return client.DeliverMessage(ctx, in, opts...)
}

// 批量列出信件
func (m *defaultMooonMailbox) ListMessages(ctx context.Context, in *ListMessagesReq, opts ...grpc.CallOption) (*ListMessagesResp, error) {
	client := mooon_mailbox.NewMooonMailboxClient(m.cli.Conn())
	return client.ListMessages(ctx, in, opts...)
}

// 批量标记为已读
func (m *defaultMooonMailbox) MarkMessagesAsRead(ctx context.Context, in *MarkMessagesAsReadReq, opts ...grpc.CallOption) (*MarkMessagesAsReadResp, error) {
	client := mooon_mailbox.NewMooonMailboxClient(m.cli.Conn())
	return client.MarkMessagesAsRead(ctx, in, opts...)
}

// 批量删除信件
func (m *defaultMooonMailbox) DeleteMessages(ctx context.Context, in *DeleteMessagesReq, opts ...grpc.CallOption) (*DeleteMessagesResp, error) {
	client := mooon_mailbox.NewMooonMailboxClient(m.cli.Conn())
	return client.DeleteMessages(ctx, in, opts...)
}
